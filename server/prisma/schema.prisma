// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String 
  email String @unique
  password String?
  role UserRole @default(USER)
  provider Provider
  resetPasswordCode String? @unique

  userProject User_Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

enum Provider {
  CREDENTIALS
  GOOGLE
}

model Project {
  id String @id @default(uuid())
  title String @db.VarChar(50)
  description String @db.VarChar(250)
  status ProjectStatus @default(OPEN)

  userProject User_Project[]
  invitation Invitation[]
  lists ProjectList[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProjectStatus {
  OPEN
  CLOSED
}

model User_Project {
  id String @id @default(uuid())
  role ProjectRole @default(VIEWER)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  projectCardMember ProjectCard_Assignee[]
  comments Comment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, projectId])
}

enum ProjectRole {
  CREATOR
  EDITOR
  VIEWER
}

model ProjectList {
  id String @id @default(uuid())
  title String
  position Int
  status ProjectCardStatus @default(OPEN)

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  
  cards ProjectCard[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
  @@index([projectId])
}

enum ProjectCardStatus {
  OPEN
  CLOSED
}

// TODO Add User Project or Project to ProjectCard, so that the creator of card name avatar can be displayed in Card. Or do it with ProjectCardMember and role

model ProjectCard {
  id String @id @default(uuid())
  title String
  description String?
  dueDate DateTime?
  position Int 

  list ProjectList @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId String

  projectCardMember ProjectCard_Assignee[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([listId])
}

model ProjectCard_Assignee {
  id String @id @default(uuid())
  userProject User_Project @relation(fields: [userProjectId], references: [id], onDelete: Cascade)
  userProjectId String
  projectCard ProjectCard @relation(fields: [projectCardId], references: [id], onDelete: Cascade)
  projectCardId String
}

model Comment {
  id String @id @default(uuid())
  content String

  author User_Project @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invitation {
  id String @id @default(uuid())
  email String
  role InvitationRole @default(VIEWER) 

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InvitationRole {
  EDITOR
  VIEWER
}

model Log {
  id String @id @default(uuid()) 
  type LogTypes
  message String
  user String
  ip String?
  createdAt DateTime @default(now())
}

enum LogTypes {
  CREATE
  GET
  UPDATE
  DELETE
}